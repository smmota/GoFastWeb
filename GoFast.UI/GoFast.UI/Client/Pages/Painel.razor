@page "/Painel"
@page "/Painel/{idMotorista?}"

@using GoFast.UI.Shared.DTO.ViewModels;
@using GoFast.UI.Shared.Services.Interfaces;
@using System.Globalization;

@inject IMotoristaService MotoristaService;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;

<h3>Painel de Motoristas</h3>

@if (motoristas == null)
{
    <p>Carregando...</p>
}
else if (!motoristas.Any())
{
    <p>Ainda não existem motoristas...</p>
}
else
{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/boxicons/2.1.0/css/boxicons.min.css" integrity="sha512-pVCM5+SN2+qwj36KonHToF2p1oIvoU3bsqxphdOIWMYmgr4ZqD3t5DjKvvetKhXGc/ZG5REYTT6ltKfExEei/Q==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/css/materialdesignicons.css" integrity="sha256-NAxhqDvtY0l4xn+YVa6WjAcmd94NNfttjNsDmNatFVc=" crossorigin="anonymous" />

    <div class="container">
        @if (motoristas.Count > 1)
        {
            <div class="row align-items-center">
                <div class="col-md-6">
                    <div class="mb-3">
                        <h5 class="card-title">Contact List <span class="text-muted fw-normal ms-2">@motoristas.Count</span></h5>
                    </div>
                </div>
            </div>
        }
        <div class="row">
            @foreach (var motorista in motoristas)
            {
                var enderecoCompleto = motorista.Endereco.Rua + " " + motorista.Endereco.Numero + ", " + motorista.Endereco.Bairro + " - " + motorista.Endereco.Cidade + " - " + motorista.Endereco.Estado + " - " + motorista.Endereco.CEP;
                var carroFormatado = motorista.Carro.Modelo + " - " + motorista.Carro.Placa + " - " + DateTime.Parse(motorista.Carro.AnoFabricacao.ToString()).ToString("MM/yyyy");
                var documentoCompleto = motorista.Carro.DocumentoCarro.Numero + " - Expedição: " + DateTime.Parse(motorista.Carro.DocumentoCarro.Expedicao.ToString()).ToString("MM/yyyy") + " - Renovação: " + DateTime.Parse(motorista.Carro.DocumentoCarro.Renovacao.ToString()).ToString("MM/yyyy");
                var dataNascimentoFormatada = Convert.ToDateTime(motorista.Nascimento).ToString("dd/MM/yyyy");

                <div class="col-xl-3 col-sm-6">
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div><img src="@motorista.Carro.DocumentoCarro.BlobStorage.Link" alt="" class="avatar-md img-thumbnail" /></div>
                                <div class="flex-1 ms-3">
                                    <h5 class="font-size-16 mb-1"><a href="#" class="text-dark">@motorista.Nome</a></h5>
                                    <span class="badge badge-soft-success mb-0">@dataNascimentoFormatada</span>
                                </div>
                            </div>
                            <div class="mt-3 pt-1">
                                <p class="text-muted mb-0 mt-2"><i class="mdi mdi-email font-size-15 align-middle pe-2 text-primary"></i>@motorista.Email</p>
                                <p class="text-muted mb-0 mt-2"><i class="mdi mdi-google-maps font-size-15 align-middle pe-2 text-primary"></i>@enderecoCompleto</p>
                                <p class="text-muted mb-0 mt-2"><i class="mdi mdi-car font-size-15 align-middle pe-2 text-primary"></i>@carroFormatado</p>
                                <p class="text-muted mb-0 mt-2"><i class="mdi mdi-file-document align-middle pe-2 text-primary"></i>@documentoCompleto</p>
                            </div>
                            <div class="d-flex gap-2 pt-4">
                                <button type="button" class="btn btn-primary btn-sm w-50" @onclick="@(e => Editar(motorista.Id))"><i class="bx bx-edit-alt me-1"></i> Editar</button>
                                <button type="button" class="btn btn-danger btn-sm w-50" @onclick="@(e => Excluir(motorista.Id))"><i class="bx bx-x me-1"></i> Excluir</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<MotoristaViewModel> motoristas = new List<MotoristaViewModel>();

    [Parameter]
    public string IdMotorista { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (IdMotorista == string.Empty || IdMotorista == null)
            motoristas = await MotoristaService.GetAll();
        else
            motoristas.Add(await MotoristaService.GetById(IdMotorista));

    }

    public async void Editar(Guid id)
    {
        NavigationManager.NavigateTo("Editar/" + id);
    }

    public async void Excluir(Guid id)
    {
        try
        {
            await MotoristaService.DeleteById(id);

            await JSRuntime.InvokeVoidAsync("alert", "Motorista excluído com sucesso!");

            if (IdMotorista == string.Empty || IdMotorista == null)
                NavigationManager.NavigateTo("Painel");
            else
                NavigationManager.NavigateTo("Painel/" + IdMotorista);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Falha ao excluir motorista");
        }
    }
}